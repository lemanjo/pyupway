import pytest
from src.pyupway.enums import Variable


def test_variable_enum_members():
    # List of all expected enum members
    expected_members = [
        "AVG_OUTDOOR_TEMP", "HOT_WATER_CHARGING", "HOT_WATER_TOP", "INDOOR_UNIT_OUTDOOR_TEMP",
        "CURRENT_BE1", "CURRENT_BE2", "CURRENT_BE3", "MYUPWAY_DEGREE_MINUTES",
        "EXTERNAL_ADJUSTMENT", "FLOOR_DRYING_FUNCTION", "CALCULATED_FLOW_TEMP",
        "EXTERNAL_FLOW_TEMP", "EXTERNAL_RETURN_TEMP", "HEAT_MEDIUM_FLOW", "HEAT_RETURN_TEMP",
        "ROOM_TEMPERATURE", "ADDITION_BLOCKED", "ADDITION_MAX_STEP", "ADDITION_STATUS",
        "ADDITION_FUSE_SIZE", "ADDITION_TIME_FACTOR", "ADDITION_ELECTRICAL_ADDITION_POWER",
        "ADDITION_SET_MAX_ELECTRICAL_ADD", "ADDITION_TEMPERATURE",
        "ENERGY_COOLING_COMPRESSOR_ONLY", "ENERGY_HEATING_COMPRESSOR_ONLY",
        "ENERGY_HEATING_INT_ADD_INCL", "ENERGY_HOTWATER_COMPRESSOR_ONLY",
        "ENERGY_HW_INCL_INT_ADD", "ENERGY_POOL_COMPRESSOR_ONLY", "ENERGY_FLOW",
        "INVERTER_STATUS", "AUX1", "AUX2", "AUX3", "AUX4", "AUX5", "AUX6", "X7", "COUNTRY",
        "DEFROSTING", "CHARGE_PUMP_SPEED", "OUTDOOR_UNIT_OUTDOOR_TEMP",
        "COMPRESSOR_BLOCKED", "COMPRESSOR_STARTS", "COMPRESSOR_PROTECTION_MODE",
        "CONDENSER_OUT", "EVAPORATOR", "HOT_GAS", "LIQUID_LINE", "RETURN_TEMP", "SUCTION_GAS",
        "HIGH_PRESSURE_SENSOR", "HIGH_PRESSURE_SENSOR_EB101", "LOW_PRESSURE_SENSOR",
        "COMPRESSOR_OPERATING_TIME", "COMPRESSOR_OPERATING_TIME_HOT_WATER",
        "COMPRESSOR_RUN_TIME_COOLING", "CURRENT_COMPRESSOR_FREQUENCY",
        "REQUESTED_COMPRESSOR_FREQUENCY", "VERSION", "SMART_PRICE_STATUS",
        "SMART_PRICE_VALUE", "SMART_PRICE_FACTOR", "SUPPLY_LINE", "RETURN_LINE",
        "OIL_TEMPERATURE_EP15_BT29", "OIL_TEMPERATURE_BT29", "MYUPLINK_DEGREE_MINUTES",
        "SLAVE_EB101", "STATUS_COMPRESSOR_EB101", "CHARGE_PUMP_EB101_GP12",
        "CURRENT_HOT_WATER_MODE", "HOT_WATER_CHARGE_SET_POINT_VALUE", "PUMP_HEATING_MEDIUM",
        "INT_ELEC_ADD_HEAT", "PRIORITY", "PUMP_HEATING_MEDIUM_2", "TEMPORARY_LUX",
        "COMFORT_MODE", "COMPRESSOR_EVAPORATOR_TEMP", "COMPRESSOR_TEMP",
        "ADDITION_IMMERSION_HEATER_TEMP", "AIR_EXHAUST_TEMP", "AIR_EXTRACT_TEMP",
        "SMART_PRICE_MODE", "DESIRED_HUMIDITY_1", "DEFROSTING_TIME", "FAN_MODE",
        "COMPRESSOR_STATUS", "SMART_PRICE_POOL_OFFSET", "SMART_PRICE_COOLING_OFFSET",
        "OPERATING_MODE", "DESIRED_HUMIDITY_2", "AIR_INCREASED_VENTILATION"
    ]

    for member in expected_members:
        assert hasattr(Variable, member), f"Enum member {member} is missing."


def test_variable_enum_values():
    # Mapping of all expected enum members and their values
    expected_values = {
        "AVG_OUTDOOR_TEMP": 40067,
        "HOT_WATER_CHARGING": 40014,
        "HOT_WATER_TOP": 40013,
        "INDOOR_UNIT_OUTDOOR_TEMP": 40004,
        "CURRENT_BE1": 40083,
        "CURRENT_BE2": 40081,
        "CURRENT_BE3": 40079,
        "MYUPWAY_DEGREE_MINUTES": 43005,
        "EXTERNAL_ADJUSTMENT": 43161,
        "FLOOR_DRYING_FUNCTION": 47276,
        "CALCULATED_FLOW_TEMP": 43009,
        "EXTERNAL_FLOW_TEMP": 40071,
        "EXTERNAL_RETURN_TEMP": 40152,
        "HEAT_MEDIUM_FLOW": 40008,
        "HEAT_RETURN_TEMP": 40012,
        "ROOM_TEMPERATURE": 40033,
        "ADDITION_BLOCKED": 10033,
        "ADDITION_MAX_STEP": 47613,
        "ADDITION_STATUS": 43091,
        "ADDITION_FUSE_SIZE": 47214,
        "ADDITION_TIME_FACTOR": 43081,
        "ADDITION_ELECTRICAL_ADDITION_POWER": 43084,
        "ADDITION_SET_MAX_ELECTRICAL_ADD": 47212,
        "ADDITION_TEMPERATURE": 40121,
        "ENERGY_COOLING_COMPRESSOR_ONLY": 44302,
        "ENERGY_HEATING_COMPRESSOR_ONLY": 44308,
        "ENERGY_HEATING_INT_ADD_INCL": 44300,
        "ENERGY_HOTWATER_COMPRESSOR_ONLY": 44306,
        "ENERGY_HW_INCL_INT_ADD": 44298,
        "ENERGY_POOL_COMPRESSOR_ONLY": 44304,
        "ENERGY_FLOW": 40072,
        "INVERTER_STATUS": 50096,
        "AUX1": 47411,
        "AUX2": 47410,
        "AUX3": 47409,
        "AUX4": 47408,
        "AUX5": 47407,
        "AUX6": 48366,
        "X7": 47412,
        "COUNTRY": 48745,
        "DEFROSTING": 44703,
        "CHARGE_PUMP_SPEED": 44396,
        "OUTDOOR_UNIT_OUTDOOR_TEMP": 44362,
        "COMPRESSOR_BLOCKED": 10014,
        "COMPRESSOR_STARTS": 44069,
        "COMPRESSOR_PROTECTION_MODE": 44702,
        "CONDENSER_OUT": 44058,
        "EVAPORATOR": 44363,
        "HOT_GAS": 44059,
        "LIQUID_LINE": 44060,
        "RETURN_TEMP": 44055,
        "SUCTION_GAS": 44061,
        "HIGH_PRESSURE_SENSOR": 44699,
        "HIGH_PRESSURE_SENSOR_EB101": 41163,
        "LOW_PRESSURE_SENSOR": 44700,
        "COMPRESSOR_OPERATING_TIME": 44071,
        "COMPRESSOR_OPERATING_TIME_HOT_WATER": 44073,
        "COMPRESSOR_RUN_TIME_COOLING": 40737,
        "CURRENT_COMPRESSOR_FREQUENCY": 44701,
        "REQUESTED_COMPRESSOR_FREQUENCY": 40782,
        "VERSION": 44014,
        "SMART_PRICE_STATUS": 44908,
        "SMART_PRICE_VALUE": 10069,
        "SMART_PRICE_FACTOR": 44896,
        "SUPPLY_LINE": 40047,
        "RETURN_LINE": 40048,
        "OIL_TEMPERATURE_EP15_BT29": 40145,
        "OIL_TEMPERATURE_BT29": 40146,
        "MYUPLINK_DEGREE_MINUTES": 40940,
        "SLAVE_EB101": 44032,
        "STATUS_COMPRESSOR_EB101": 44064,
        "CHARGE_PUMP_EB101_GP12": 49996,
        "CURRENT_HOT_WATER_MODE": 43109,
        "HOT_WATER_CHARGE_SET_POINT_VALUE": 43115,
        "PUMP_HEATING_MEDIUM": 49992,
        "INT_ELEC_ADD_HEAT": 49993,
        "PRIORITY": 49994,
        "PUMP_HEATING_MEDIUM_2": 49995,
        "TEMPORARY_LUX": 50004,
        "COMFORT_MODE": 47041,
        "COMPRESSOR_EVAPORATOR_TEMP": 40020,
        "COMPRESSOR_TEMP": 40023,
        "ADDITION_IMMERSION_HEATER_TEMP": 40024,
        "AIR_EXHAUST_TEMP": 40025,
        "AIR_EXTRACT_TEMP": 40026,
        "SMART_PRICE_MODE": 41929,
        "DESIRED_HUMIDITY_1": 42770,
        "DEFROSTING_TIME": 43066,
        "FAN_MODE": 43108,
        "COMPRESSOR_STATUS": 43427,
        "SMART_PRICE_POOL_OFFSET": 44898,
        "SMART_PRICE_COOLING_OFFSET": 44899,
        "OPERATING_MODE": 47137,
        "DESIRED_HUMIDITY_2": 49633,
        "AIR_INCREASED_VENTILATION": 50005,
    }

    for member_name, expected_value in expected_values.items():
        assert getattr(Variable, member_name).value == expected_value, f"{
            member_name} does not match expected value {expected_value}"
